"""
–°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –¥–ª—è SuperWhisper
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –¥–∏–∞–ø–∞–∑–æ–Ω—ã
"""

import logging
import re
from typing import Dict, List, Optional


class NumberService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""

    def __init__(self, config=None):
        self.logger = logging.getLogger(__name__)
        self.config = config

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enabled = True
        self.format_numbers = True
        self.format_percentages = True
        self.format_ranges = True
        self.format_units = True
        self.format_dates = True
        self.format_time = True
        self.format_file_sizes = True
        self.quiet_mode = True  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –ª–æ–≥–æ–≤

        if config and hasattr(config, 'numbers'):
            numbers_config = config.numbers
            self.enabled = numbers_config.get('enabled', True)
            self.format_numbers = numbers_config.get('format_numbers', True)
            self.format_percentages = numbers_config.get('format_percentages', True)
            self.format_ranges = numbers_config.get('format_ranges', True)
            self.format_units = numbers_config.get('format_units', True)
            self.format_dates = numbers_config.get('format_dates', True)
            self.format_time = numbers_config.get('format_time', True)
            self.format_file_sizes = numbers_config.get('format_file_sizes', True)

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —á–∏—Å–µ–ª
        self.number_patterns = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–∞ (3 500, 5 000)
            'large_number': re.compile(r'\b(\d{1,3})(?=(\d{3})+(?!\d))'),

            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã (5% -> 5 %, 10 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ -> 10%)
            'percentage': re.compile(r'\b(\d+)(?:\s*)%(?:\s*(?:–ø—Ä–æ—Ü–µ–Ω—Ç(?:–∞|–æ–≤)?|percent)?)?\b', re.IGNORECASE),

            # –î–∏–∞–ø–∞–∑–æ–Ω—ã (5-10 -> 5‚Äì10, –æ—Ç 5 –¥–æ 10 -> 5‚Äì10)
            'range_dash': re.compile(r'\b(\d+)\s*-\s*(\d+)\b'),
            'range_from_to': re.compile(r'\b–æ—Ç\s+(\d+)\s+–¥–æ\s+(\d+)\b', re.IGNORECASE),

            # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
            'units': re.compile(r'\b(\d+)\s*(–∑–≤–æ–Ω–∫–æ–≤|—Ä—É–±–ª(?:–µ–π|—è|—å)|–¥–æ–ª–ª–∞—Ä–æ–≤|–µ–≤—Ä–æ|–ø—Ä–æ—Ü–µ–Ω—Ç(?:–∞|–æ–≤)?|—à—Ç—É–∫|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|—Å–µ–∫—É–Ω–¥|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü–µ–≤|–ª–µ—Ç|–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤|–º–µ—Ç—Ä–æ–≤|–≥—Ä–∞–º–º–æ–≤|–∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤|—Ç–æ–Ω–Ω)\b', re.IGNORECASE),

            # –î–∞—Ç—ã –∏ –≥–æ–¥—ã
            'year': re.compile(r'\b(\d{4})\s+–≥–æ–¥(?:—É|–∞|–µ|–æ–º)?\b', re.IGNORECASE),
            'century': re.compile(r'\b(\d{2})(?:0(?:0(?:–≥–æ–¥–∞?|–ª–µ—Ç)?)?)\s+–≥–æ–¥(?:—É|–∞|–µ|–æ–º)?\b', re.IGNORECASE),

            # –í—Ä–µ–º—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)
            'time_hm': re.compile(r'\b(\d{1,2}):(\d{2})\b'),

            # –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            'phone': re.compile(r'\b(\d{3})[\s\-\.]?(\d{3})[\s\-\.]?(\d{4})\b'),

            # –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ (MB, GB, etc.)
            'file_size': re.compile(r'\b(\d+(?:\.\d+)?)\s*(MB|GB|TB|KB)\b', re.IGNORECASE),

            # –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
            'decimal': re.compile(r'\b(\d+)\.(\d+)\b')
        }

        # –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü
        self.unit_abbreviations = {
            '–∑–≤–æ–Ω–∫–æ–≤': '–∑–≤–æ–Ω–∫–æ–≤',
            '—Ä—É–±–ª–µ–π': '—Ä—É–±.',
            '—Ä—É–±–ª—è': '—Ä—É–±.',
            '—Ä—É–±–ª—å': '—Ä—É–±.',
            '–¥–æ–ª–ª–∞—Ä–æ–≤': 'USD',
            '–µ–≤—Ä–æ': 'EUR',
            '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤': '–ø—Ä–æ—Ü–µ–Ω—Ç.',
            '–ø—Ä–æ—Ü–µ–Ω—Ç–∞': '–ø—Ä–æ—Ü–µ–Ω—Ç.',
            '—à—Ç—É–∫': '—à—Ç.',
            '—á–∞—Å–æ–≤': '—á.',
            '–º–∏–Ω—É—Ç': '–º–∏–Ω.',
            '—Å–µ–∫—É–Ω–¥': '—Å–µ–∫.',
            '–¥–Ω–µ–π': '–¥–Ω.',
            '–Ω–µ–¥–µ–ª—å': '–Ω–µ–¥.',
            '–º–µ—Å—è—Ü–µ–≤': '–º–µ—Å.',
            '–ª–µ—Ç': '–ª.',
            '–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤': '–∫–º.',
            '–º–µ—Ç—Ä–æ–≤': '–º.',
            '–≥—Ä–∞–º–º–æ–≤': '–≥.',
            '–∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤': '–∫–≥.',
            '—Ç–æ–Ω–Ω': '—Ç.'
        }

        self.logger.info("üî¢ NumberService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def process_text(self, text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è —á–∏—Å–ª–∞"""
        if not self.enabled or not text:
            return text

        try:
            # –®–∞–≥ 1: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª (–ø—Ä–æ–±–µ–ª—ã)
            if self.format_numbers:
                text = self._format_large_numbers(text)

            # –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            if self.format_percentages:
                text = self._format_percentages(text)

            # –®–∞–≥ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            if self.format_ranges:
                text = self._format_ranges(text)

            # –®–∞–≥ 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
            if self.format_units:
                text = self._format_units(text)

            # –®–∞–≥ 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            if self.format_dates:
                text = self._format_dates(text)

            # –®–∞–≥ 6: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if self.format_time:
                text = self._format_time(text)

            # –®–∞–≥ 7: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
            if self.format_file_sizes:
                text = self._format_file_sizes(text)

            return text

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª: {e}")
            return text

    def _format_large_numbers(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ —Å —Ç–æ–Ω–∫–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ (3500 -> 3‚ÄØ500)"""
        try:
            def add_spaces(match):
                number = match.group(0)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–Ω–∫–∏–π –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª (U+202F)
                thin_space = '\u202F'
                return re.sub(r'(\d)(?=(\d{3})+(?!\d))', r'\1' + thin_space, number)

            return self.number_patterns['large_number'].sub(add_spaces, text)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª: {e}")
            return text

    def _format_percentages(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã (5% -> 5 %, 10 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ -> 10%)"""
        try:
            def format_percentage(match):
                number = match.group(1)
                return f"{number}%"

            return self.number_patterns['percentage'].sub(format_percentage, text)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {e}")
            return text

    def _format_ranges(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã (5-10 -> 5‚Äì10, –æ—Ç 5 –¥–æ 10 -> 5‚Äì10)"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "–æ—Ç X –¥–æ Y"
            def format_from_to(match):
                start = match.group(1)
                end = match.group(2)
                return f"{start}‚Äì{end}"

            text = self.number_patterns['range_from_to'].sub(format_from_to, text)

            # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º X-Y
            def format_dash_range(match):
                start = match.group(1)
                end = match.group(2)
                return f"{start}‚Äì{end}"

            text = self.number_patterns['range_dash'].sub(format_dash_range, text)

            return text

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {e}")
            return text

    def _format_units(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏"""
        try:
            def format_unit(match):
                number = match.group(1)
                unit = match.group(2).lower()

                # –ò—â–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã
                abbreviated_unit = self.unit_abbreviations.get(unit, unit)

                return f"{number} {abbreviated_unit}"

            return self.number_patterns['units'].sub(format_unit, text)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü: {e}")
            return text

    def _format_dates(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—ã –∏ –≥–æ–¥—ã"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥–æ–¥—ã (2025 –≥–æ–¥ -> 2025)
            def format_year(match):
                year = match.group(1)
                return year

            text = self.number_patterns['year'].sub(format_year, text)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–µ–∫–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
            def format_century(match):
                century = match.group(1)
                return f"{century}00"

            text = self.number_patterns['century'].sub(format_century, text)

            return text

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç: {e}")
            return text

    def _format_time(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è"""
        try:
            def format_time_hm(match):
                hours = match.group(1)
                minutes = match.group(2)
                return f"{hours}:{minutes}"

            text = self.number_patterns['time_hm'].sub(format_time_hm, text)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            def format_phone(match):
                area = match.group(1)
                prefix = match.group(2)
                number = match.group(3)
                return f"{area}-{prefix}-{number}"

            text = self.number_patterns['phone'].sub(format_phone, text)

            return text

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return text

    def _format_file_sizes(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        try:
            def format_file_size(match):
                size = match.group(1)
                unit = match.group(2).upper()
                return f"{size} {unit}"

            return self.number_patterns['file_size'].sub(format_file_size, text)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤: {e}")
            return text

    def add_custom_unit(self, full_name: str, abbreviation: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        try:
            self.unit_abbreviations[full_name.lower()] = abbreviation
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞: {full_name} -> {abbreviation}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã: {e}")

    def format_specific_number(self, number: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —á–∏—Å–ª–æ–º
            temp_text = f" {number} "
            formatted_text = self.process_text(temp_text)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            return formatted_text.strip()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ {number}: {e}")
            return number

    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "enabled": self.enabled,
            "format_numbers": self.format_numbers,
            "format_percentages": self.format_percentages,
            "format_ranges": self.format_ranges,
            "format_units": self.format_units,
            "format_dates": self.format_dates,
            "format_time": self.format_time,
            "format_file_sizes": self.format_file_sizes,
            "unit_abbreviations_count": len(self.unit_abbreviations)
        }

    @staticmethod
    def is_number_like(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–ø–æ–¥–æ–±–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        number_indicators = [
            re.compile(r'\d{4,}'),  # –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
            re.compile(r'\d+%'),    # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
            re.compile(r'\d+-\d+'), # –î–∏–∞–ø–∞–∑–æ–Ω—ã
            re.compile(r'–æ—Ç \d+ –¥–æ \d+', re.IGNORECASE),  # –î–∏–∞–ø–∞–∑–æ–Ω—ã —Å–ª–æ–≤–∞–º–∏
            re.compile(r'\d{4}\s+–≥–æ–¥', re.IGNORECASE),  # –ì–æ–¥—ã
            re.compile(r'\d{1,2}:\d{2}'),  # –í—Ä–µ–º—è
            re.compile(r'\d+\.\d+'),  # –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
            re.compile(r'\d+\s*(MB|GB|TB|KB)', re.IGNORECASE)  # –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        ]

        return any(pattern.search(text) for pattern in number_indicators)
