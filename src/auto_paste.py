"""
–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import logging
import time
import pyperclip
import subprocess
from pynput.keyboard import Key, Controller


class AutoPasteService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, config=None):
        self.logger = logging.getLogger(__name__)
        self.keyboard = Controller()
        self.config = config
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.enabled = True
        self.paste_delay = 0.1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        self.force_mode = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤ force —Ä–µ–∂–∏–º–µ
        self.safe_apps = [
            "com.apple.dt.Xcode",
            "com.microsoft.VSCode",
            "com.apple.TextEdit",
            "com.apple.Notes",
            "com.apple.mail",
            "com.tinyspeck.slackmacgap",
            "com.hnc.Discord",
            "com.apple.Safari",
            "com.google.Chrome"
        ]

        if config and hasattr(config, 'ui'):
            self.enabled = config.ui.get('auto_paste_enabled', True)
            self.paste_delay = config.ui.get('auto_paste_delay', 0.1)
            self.force_mode = config.ui.get('auto_paste_force_mode', False)

        # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.logger.info(f"üîß AutoPasteService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        self.logger.info(f"   - enabled: {self.enabled}")
        self.logger.info(f"   - delay: {self.paste_delay}")
        self.logger.info(f"   - force_mode: {self.force_mode}")
        self.logger.info(f"   - safe_apps: {len(getattr(self, 'safe_apps', []))} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    
    def paste_text(self, text: str, use_clipboard: bool = True) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            use_clipboard: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –°–†–ê–ó–£
            text = text.strip()
            
            self.logger.info(f"üîÑ –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞: '{text[:50]}...' ({len(text)} —Å–∏–º–≤.)")

            if not self.enabled:
                self.logger.debug("–ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return False

            if not text:
                self.logger.warning("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
                return False
            
            # üÜï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú - –ø—Ä–æ–±—É–µ–º –≤—Å–µ–≥–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å
            active_app = self._get_active_app_name()
            self.logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {active_app}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï force —Ä–µ–∂–∏–º
            force_mode = getattr(self, 'force_mode', False)
            if not force_mode and not self._is_safe_to_paste():
                self.logger.warning("‚ö†Ô∏è –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏")
                self.logger.info("üí° –í–∫–ª—é—á–∏—Ç–µ auto_paste_force_mode –≤ config.yaml –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏")
                # üÜï –ù–û –ü–û–ü–†–û–ë–£–ï–ú –í–°–¢–ê–í–ò–¢–¨ –ß–ï–†–ï–ó –ë–£–§–ï–† –û–ë–ú–ï–ù–ê
                self.logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞...")
                use_clipboard = True
            else:
                self.logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ force —Ä–µ–∂–∏–º")

            # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
            time.sleep(self.paste_delay)
            
            if use_clipboard:
                # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
                self.logger.info("üìã –ù–∞—á–∏–Ω–∞–µ–º –≤—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä
                original_clipboard = self._get_clipboard_safely()
                self.logger.info(f"üíæ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä: '{original_clipboard[:50]}...'")

                # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—à —Ç–µ–∫—Å—Ç
                pyperclip.copy(text)
                time.sleep(0.05)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª—Å—è
                copied_text = self._get_clipboard_safely()
                self.logger.info(f"üìù –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{copied_text}'")

                if copied_text != text:
                    self.logger.warning(f"‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û–∂–∏–¥–∞–ª–æ—Å—å: '{text}', –ø–æ–ª—É—á–µ–Ω–æ: '{copied_text}'")

                # üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–°–¢–ê–í–ö–ê - –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                self.logger.info("‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Cmd+V")
                
                for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
                    try:
                        with self.keyboard.pressed(Key.cmd):
                            self.keyboard.press('v')
                            self.keyboard.release('v')
                        
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç–∞–≤–∫–∏
                        time.sleep(0.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                        
                        self.logger.info(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: Cmd+V –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        break
                        
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                        if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                            raise
                        time.sleep(0.1)

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                if original_clipboard:
                    pyperclip.copy(original_clipboard)
                    self.logger.info("üîÑ –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                # –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–π –≤–≤–æ–¥ —Å–∏–º–≤–æ–ª–æ–≤ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)
                self.logger.info("‚å®Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤–≤–æ–¥ —Å–∏–º–≤–æ–ª–æ–≤")
                self.keyboard.type(text)
            
            self.logger.info("‚úÖ –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏: {e}")
            import traceback
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    def _get_clipboard_safely(self) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            return pyperclip.paste()
        except Exception:
            return ""
    
    def _is_safe_to_paste(self) -> bool:
        """
        üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
        
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        """
        try:
            # üÜï –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê - –†–ê–ó–†–ï–®–ê–ï–ú –í–°–¢–ê–í–ö–£ –í–ï–ó–î–ï
            app_name = self._get_active_app_name()
            self.logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: '{app_name}' - –ê–í–¢–û–í–°–¢–ê–í–ö–ê –†–ê–ó–†–ï–®–ï–ù–ê")
            
            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!
            return True
            
        except Exception as e:
            self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
            # –í—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—Ç–∞–≤–∫—É
            return True
    
    def quick_paste(self, text: str) -> bool:
        """
        –ë—ã—Å—Ç—Ä–∞—è –≤—Å—Ç–∞–≤–∫–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            pyperclip.copy(text)
            time.sleep(0.05)
            
            with self.keyboard.pressed(Key.cmd):
                self.keyboard.press('v')
                self.keyboard.release('v')
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏: {e}")
            return False 

    def _is_safe_application(self, app_name: str) -> bool:
        """
        üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏
        –¢–µ–ø–µ—Ä—å –†–ê–ó–†–ï–®–ê–ï–ú –í–ï–ó–î–ï!
        """
        try:
            if not app_name:
                return False

            # üéØ –£–ë–ò–†–ê–ï–ú –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–µ–∑–¥–µ!
            self.logger.info(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return False

    def _get_active_app_name(self) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        try:
            script = '''
            tell application "System Events"
                set frontApp to name of first application process whose frontmost is true
                return frontApp
            end tell
            '''

            result = subprocess.run(
                ['osascript', '-e', script],
                capture_output=True,
                text=True,
                timeout=1
            )

            if result.returncode == 0:
                return result.stdout.strip()
            else:
                return "unknown"

        except Exception as e:
            self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
            return "unknown" 