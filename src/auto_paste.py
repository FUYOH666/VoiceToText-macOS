"""
–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import logging
import time
import pyperclip
import subprocess
from pynput.keyboard import Key, Controller


class AutoPasteService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, config=None):
        self.logger = logging.getLogger(__name__)
        self.keyboard = Controller()
        self.config = config
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.enabled = True
        self.paste_delay = 0.1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        self.safe_apps = [
            "com.apple.dt.Xcode",
            "com.microsoft.VSCode", 
            "com.apple.TextEdit",
            "com.apple.Notes",
            "com.apple.mail",
            "com.tinyspeck.slackmacgap",
            "com.hnc.Discord",
            "com.apple.Safari",
            "com.google.Chrome"
        ]
        
        if config and hasattr(config, 'ui'):
            self.enabled = config.ui.get('auto_paste_enabled', True)
            self.paste_delay = config.ui.get('auto_paste_delay', 0.1)
            self.force_mode = config.ui.get('auto_paste_force_mode', False)
    
    def paste_text(self, text: str, use_clipboard: bool = True) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            use_clipboard: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            if not self.enabled:
                self.logger.debug("–ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                return False
            
            if not text or not text.strip():
                self.logger.warning("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
                return False
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –í–°–ï –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
            text = text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –Ω–µ force —Ä–µ–∂–∏–º)
            if not getattr(self, 'force_mode', False):
                if not self._is_safe_to_paste():
                    self.logger.warning("–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏")
                    self.logger.info("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤–∫–ª—é—á–∏—Ç–µ auto_paste_force_mode –≤ config.yaml")
                    return False
            else:
                self.logger.info("Force —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            
            self.logger.info(f"üîÑ –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            force_mode = getattr(self, 'force_mode', False)
            self.logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - enabled: {self.enabled}, "
                            f"delay: {self.paste_delay}, force: {force_mode}")
            
            # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(self.paste_delay)
            
            if use_clipboard:
                # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
                original_clipboard = self._get_clipboard_safely()
                
                # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—à —Ç–µ–∫—Å—Ç
                pyperclip.copy(text)
                time.sleep(0.05)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Cmd+V
                with self.keyboard.pressed(Key.cmd):
                    self.keyboard.press('v')
                    self.keyboard.release('v')
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                time.sleep(0.1)
                if original_clipboard:
                    pyperclip.copy(original_clipboard)
            else:
                # –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–π –≤–≤–æ–¥ —Å–∏–º–≤–æ–ª–æ–≤ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)
                self.keyboard.type(text)
            
            self.logger.info("–ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏: {e}")
            return False
    
    def _get_clipboard_safely(self) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            return pyperclip.paste()
        except Exception:
            return ""
    
    def _is_safe_to_paste(self) -> bool:
        """
        üéØ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø - –†–ê–ó–†–ï–®–ê–ï–ú –ê–í–¢–û–í–°–¢–ê–í–ö–£ –í–ï–ó–î–ï!
        
        Returns:
            –í—Å–µ–≥–¥–∞ True - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!
        """
        try:
            # –í—Å—ë —Ä–∞–≤–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            script = '''
            tell application "System Events"
                set frontApp to name of first application process whose frontmost is true
                return frontApp
            end tell
            '''
            
            try:
                result = subprocess.run(
                    ['osascript', '-e', script],
                    capture_output=True,
                    text=True,
                    timeout=1
                )
                
                if result.returncode == 0:
                    app_name = result.stdout.strip()
                    self.logger.info(f"–ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: '{app_name}'")
                    self.logger.info(f"üéØ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' - –ê–í–¢–û–í–°–¢–ê–í–ö–ê –†–ê–ó–†–ï–®–ï–ù–ê")
                    
            except Exception as script_error:
                self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {script_error}")
            
            # üéØ –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–ú TRUE - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!
            return True
            
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            # üéØ –î–ê–ñ–ï –ü–†–ò –û–®–ò–ë–ö–ï –†–ê–ó–†–ï–®–ê–ï–ú!
            return True
    
    def quick_paste(self, text: str) -> bool:
        """
        –ë—ã—Å—Ç—Ä–∞—è –≤—Å—Ç–∞–≤–∫–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            pyperclip.copy(text)
            time.sleep(0.05)
            
            with self.keyboard.pressed(Key.cmd):
                self.keyboard.press('v')
                self.keyboard.release('v')
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏: {e}")
            return False 

    def _is_safe_application(self, app_name: str) -> bool:
        """
        üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏
        –¢–µ–ø–µ—Ä—å –†–ê–ó–†–ï–®–ê–ï–ú –í–ï–ó–î–ï!
        """
        try:
            if not app_name:
                return False
            
            # üéØ –£–ë–ò–†–ê–ï–ú –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–µ–∑–¥–µ!
            self.logger.info(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return False 