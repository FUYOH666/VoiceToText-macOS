"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
"""

import logging
import numpy as np
import pyaudio
import time
import gc
from typing import Any, Callable, Optional
from collections import deque


class AudioRecorder:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    
    def __init__(self, config: Any):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Ä–µ–∫–æ—Ä–¥–µ—Ä–∞
        
        Args:
            config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.sample_rate = config.audio["sample_rate"]
        self.chunk_size = 1024
        self.channels = 1  # –ú–æ–Ω–æ
        self.format = pyaudio.paFloat32
        
        # üÜï –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        max_duration_key = "max_recording_duration"
        # 0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞
        self.max_duration = config.audio.get(max_duration_key, 0)
        cleanup_key = "buffer_cleanup_after_processing"
        self.cleanup_after_processing = config.audio.get(cleanup_key, True)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        self.is_recording = False
        self.audio_data = deque()
        self.recording_thread = None
        self.last_recording = None
        
        # PyAudio –æ–±—ä–µ–∫—Ç
        self.audio = None
        self.stream = None
        
        # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
        self.audio_callback: Optional[Callable] = None
        
        self._init_audio()
    
    def _init_audio(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç PyAudio"""
        try:
            self.audio = pyaudio.PyAudio()
            self.logger.info("PyAudio –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            self._list_audio_devices()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PyAudio: {e}")
            raise
    
    def _list_audio_devices(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            device_count = self.audio.get_device_count()
            msg = f"–ù–∞–π–¥–µ–Ω–æ {device_count} –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:"
            self.logger.info(msg)
            
            for i in range(device_count):
                device_info = self.audio.get_device_info_by_index(i)
                if device_info["maxInputChannels"] > 0:
                    device_name = device_info['name']
                    input_channels = device_info['maxInputChannels']
                    device_msg = f"  {i}: {device_name} (–≤—Ö–æ–¥—ã: {input_channels})"
                    self.logger.info(device_msg)
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    def start_recording(self, callback: Optional[Callable] = None):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
        
        Args:
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            if self.is_recording:
                self.logger.warning("–ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç")
                return
            
            # üÜï –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PyAudio –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.audio is None:
                self.logger.info("–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PyAudio...")
                self._init_audio()
            
            self.audio_callback = callback
            self.audio_data.clear()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
            self.stream = self.audio.open(
                format=self.format,
                channels=self.channels,
                rate=self.sample_rate,
                input=True,
                frames_per_buffer=self.chunk_size,
                stream_callback=self._audio_callback
            )
            
            self.is_recording = True
            self.stream.start_stream()
            
            # üÜï –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏
            if self.max_duration > 0:
                msg = f"–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç–∞ (–º–∞–∫—Å. {self.max_duration}—Å)"
                self.logger.info(msg)
            else:
                no_limit_msg = "–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏)"
                self.logger.info(no_limit_msg)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {e}")
            raise
    

    
    def stop_recording(self) -> Optional[np.ndarray]:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        
        Returns:
            –ú–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not self.is_recording:
                self.logger.warning("–ó–∞–ø–∏—Å—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return None
            
            self.is_recording = False
            
            if self.stream:
                self.stream.stop_stream()
                self.stream.close()
                self.stream = None
            # Explicitly flush PyAudio instance buffers on stop
            try:
                if self.audio:
                    self.audio.terminate()
                    self.audio = None
            except Exception:
                pass
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            if self.audio_data:
                audio_array = np.concatenate(list(self.audio_data))
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
                self.last_recording = audio_array
                
                duration = len(audio_array) / self.sample_rate
                duration_msg = f"–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –¥–ª–∏–Ω–∞: {duration:.2f}—Å"
                self.logger.info(duration_msg)
                
                # üÜï –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                if self.cleanup_after_processing:
                    self._cleanup_buffer()
                
                return audio_array
            else:
                self.logger.warning("–ù–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
                return None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    def _audio_callback(self, in_data, frame_count, time_info, status):
        """
        Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            in_data: –í—Ö–æ–¥–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            frame_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–µ–π–º–æ–≤
            time_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
            status: –°—Ç–∞—Ç—É—Å –ø–æ—Ç–æ–∫–∞
            
        Returns:
            Tuple –¥–ª—è PyAudio
        """
        try:
            if self.is_recording:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array
                audio_chunk = np.frombuffer(in_data, dtype=np.float32)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.audio_data.append(audio_chunk)
                
                # üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if self.max_duration > 0:
                    current_chunks = len(self.audio_data) * self.chunk_size
                    current_duration = current_chunks / self.sample_rate
                    if current_duration > self.max_duration:
                        limit_msg = (f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–∏ "
                                   f"{self.max_duration}—Å")
                        self.logger.warning(limit_msg)
                        # –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
                        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å
                        # self.is_recording = False  # –î–ª—è –∞–≤—Ç–æ—Å—Ç–æ–ø–∞
                
                # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.audio_callback:
                    try:
                        self.audio_callback(audio_chunk)
                    except Exception as e:
                        callback_err = f"–û—à–∏–±–∫–∞ –≤ audio callback: {e}"
                        self.logger.error(callback_err)
            
            return (in_data, pyaudio.paContinue)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ audio callback: {e}")
            return (in_data, pyaudio.paContinue)
    
    def _cleanup_buffer(self):
        """üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–∞"""
        try:
            self.audio_data.clear()
            if hasattr(self, 'last_recording'):
                self.last_recording = None
            gc.collect()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            self.logger.debug("–ê—É–¥–∏–æ –±—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞: {e}")
    
    def get_current_audio(self) -> Optional[np.ndarray]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
        
        Returns:
            –ú–∞—Å—Å–∏–≤ —Ç–µ–∫—É—â–∏—Ö –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            if self.audio_data:
                return np.concatenate(list(self.audio_data))
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def record_for_duration(self, duration: float) -> Optional[np.ndarray]:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ú–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            self.start_recording()
            time.sleep(duration)
            return self.stop_recording()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return None
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        try:
            if self.is_recording:
                self.stop_recording()
            
            # üÜï –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤
            self._cleanup_buffer()
            
            if self.audio:
                self.audio.terminate()
                self.audio = None
            
            self.logger.info("–ê—É–¥–∏–æ —Ä–µ–∫–æ—Ä–¥–µ—Ä –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∫–æ—Ä–¥–µ—Ä–∞: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        self.cleanup() 