"""
–°–µ—Ä–≤–∏—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è SuperWhisper
–§–æ–∫—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–µ
"""

import json
import os
import logging
import re
from typing import Dict, List, Optional, Set


class VocabularyService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º"""

    def __init__(self, config=None):
        self.logger = logging.getLogger(__name__)
        self.config = config

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–ª–æ–≤–∞—Ä—è
        self.base_dir = os.path.dirname(os.path.dirname(__file__))
        self.vocab_dir = os.path.join(self.base_dir, "vocabulary")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enabled = True
        self.expand_abbreviations = True
        self.capitalize_names = True
        self.handle_compound_words = True

        if config and hasattr(config, 'vocabulary'):
            vocab_config = config.vocabulary
            self.enabled = vocab_config.get('enabled', True)
            self.expand_abbreviations = vocab_config.get('expand_abbreviations', True)
            self.capitalize_names = vocab_config.get('capitalize_names', True)
            self.handle_compound_words = vocab_config.get('handle_compound_words', True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏
        self.custom_terms = self._load_vocabulary("custom_terms.json")
        self.abbreviations = self._load_vocabulary("abbreviations.json")
        self.names = self._load_vocabulary("names.json")

        # –ö—ç—à –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._compiled_patterns = {}

        self.logger.info(f"üìö VocabularyService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self.custom_terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤, "
                        f"{len(self.abbreviations)} —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π, {len(self.names)} –∏–º–µ–Ω")

    def _load_vocabulary(self, filename: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            filepath = os.path.join(self.vocab_dir, filename)
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å: {filename} ({len(data)} –∑–∞–ø–∏—Å–µ–π)")
                    return data
            else:
                self.logger.warning(f"–§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
                return {}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è {filename}: {e}")
            return {}

    def process_text(self, text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è"""
        if not self.enabled:
            return text

        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.expand_abbreviations:
                text = self._expand_abbreviations(text)

            if self.capitalize_names:
                text = self._capitalize_names(text)

            if self.handle_compound_words:
                text = self._handle_compound_words(text)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            text = self._apply_russian_rules(text)

            return text

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ–≤–∞—Ä–µ–º: {e}")
            return text

    def _expand_abbreviations(self, text: str) -> str:
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –ø–æ –¥–ª–∏–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ)
            # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
            sorted_abbrs = sorted(self.abbreviations.items(),
                                key=lambda x: len(x[0]), reverse=True)

            for abbr, data in sorted_abbrs:
                if isinstance(data, dict) and 'expand' in data:
                    expand_to = data.get('context', data['expand'])  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
                    if ' ' in abbr:  # –°–æ—Å—Ç–∞–≤–Ω–æ–π —Ç–µ—Ä–º–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "MLX Whisper")
                        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
                        pattern = r'\b' + re.escape(abbr) + r'\b'
                        text = re.sub(pattern, expand_to, text, flags=re.IGNORECASE)
                    else:
                        # –û–±—ã—á–Ω–∞—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
                        pattern = r'\b' + re.escape(abbr) + r'\b'
                        text = re.sub(pattern, expand_to, text, flags=re.IGNORECASE)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ Whisper
            text = self._fix_whisper_artifacts(text)

            return text
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä: {e}")
            return text

    def _fix_whisper_artifacts(self, text: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã Whisper –º–æ–¥–µ–ª–∏"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "Apple MLX framework. OpenAI Whisper model" ‚Üí "MLX Whisper"
            text = re.sub(r'Apple\s+MLX\s+framework\.?\s*OpenAI\s+Whisper\s+model',
                         'MLX Whisper', text, flags=re.IGNORECASE)

            # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ª—é–±—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            text = re.sub(r'Apple\s+MLX\s+framework(?:\.?\s*OpenAI\s+Whisper\s+model)?',
                         'MLX Whisper', text, flags=re.IGNORECASE)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "Apple MLX framework" ‚Üí "MLX"
            text = re.sub(r'Apple\s+MLX\s+framework', 'MLX', text, flags=re.IGNORECASE)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "OpenAI Whisper model" ‚Üí "Whisper"
            text = re.sub(r'OpenAI\s+Whisper\s+model', 'Whisper', text, flags=re.IGNORECASE)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" ‚Üí "macOS" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            text = re.sub(r'–¥–ª—è\s+Mac\s+–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è\s+—Å–∏—Å—Ç–µ–º–∞',
                         '–¥–ª—è macOS', text, flags=re.IGNORECASE)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "Voice ‚Äì to ‚Äì Text" ‚Üí "Voice-to-Text"
            text = re.sub(r'\bVoice\s*‚Äì\s*to\s*‚Äì\s*Text\b', 'Voice-to-Text', text, flags=re.IGNORECASE)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "Voice to Text" ‚Üí "Voice-to-Text"
            text = re.sub(r'\bVoice\s+to\s+Text\b', 'Voice-to-Text', text, flags=re.IGNORECASE)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "Voice To Text" ‚Üí "Voice-to-Text"
            text = re.sub(r'\bVoice\s+To\s+Text\b', 'Voice-to-Text', text, flags=re.IGNORECASE)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "post-–æ–±—Ä–∞–±–æ—Ç–∫—É" ‚Üí "–ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É"
            text = re.sub(r'post\s*-\s*–æ–±—Ä–∞–±–æ—Ç–∫—É', '–ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É', text, flags=re.IGNORECASE)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "—Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤" ‚Üí "—Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤"
            text = re.sub(r'—Å–ª–æ–≤\s*-\s*–ø–∞—Ä–∞–∑–∏—Ç–æ–≤', '—Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤', text, flags=re.IGNORECASE)

            return text
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ Whisper: {e}")
            return text

    def _capitalize_names(self, text: str) -> str:
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º–µ–Ω–∞, —Ñ–∞–º–∏–ª–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞"""
        try:
            if not self.names:
                return text

            words = text.split()

            for i, word in enumerate(words):
                word_lower = word.lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–∞
                if '–∏–º–µ–Ω–∞' in self.names and word_lower in self.names['–∏–º–µ–Ω–∞']:
                    words[i] = word.capitalize()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–º–∏–ª–∏–∏
                elif '—Ñ–∞–º–∏–ª–∏–∏' in self.names and word_lower in self.names['—Ñ–∞–º–∏–ª–∏–∏']:
                    words[i] = word.capitalize()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Å—Ç–≤–∞
                elif '–æ—Ç—á–µ—Å—Ç–≤–∞' in self.names and word_lower in self.names['–æ—Ç—á–µ—Å—Ç–≤–∞']:
                    words[i] = word_lower.capitalize()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
                elif '—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ_—Å–ª–æ–≤–∞' in self.names and word_lower in self.names['—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ_—Å–ª–æ–≤–∞']:
                    words[i] = word.capitalize()

            return ' '.join(words)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω: {e}")
            return text

    def _handle_compound_words(self, text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–ª–æ–∂–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            replacements = {
                r'\b–≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ\b': '–≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ',
                r'\b—Ç –µ\b': '—Ç.–µ.',
                r'\b–∏ —Ç –¥\b': '–∏ —Ç.–¥.',
                r'\b–∏ —Ç –ø\b': '–∏ —Ç.–ø.',
                r'\b—Ç –∫\b': '—Ç.–∫.',
                r'\b–≤ —Ç —á\b': '–≤ —Ç.—á.',
                r'\b–¥ —Ä\b': '–¥—Ä.',
                r'\b–≥\b': '–≥.',  # –≥–æ—Ä–æ–¥
                r'\b—É–ª\b': '—É–ª.',  # —É–ª–∏—Ü–∞
            }

            for pattern, replacement in replacements.items():
                text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)

            return text

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤: {e}")
            return text

    def _apply_russian_rules(self, text: str) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –≤—Å–µ—Ö '–µ' –Ω–∞ '—ë' - —ç—Ç–æ –ª–æ–º–∞–µ—Ç —Ç–µ–∫—Å—Ç!
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —É–º–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ–≤ –≥–¥–µ —ç—Ç–æ –Ω—É–∂–Ω–æ

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–ª—É—á–∞–∏, –≥–¥–µ Whisper –ø—É—Ç–∞–µ—Ç —ë/–µ
            corrections = {
                '–¥–µ–ª–∞–µ': '–¥–µ–ª–∞–µ—Ç',
                '–¥–µ–ª–∞–ï': '–î–µ–ª–∞–µ—Ç',
                '—Å–¥–µ–ª–∞–µ': '—Å–¥–µ–ª–∞–µ—Ç',
                '—Å–¥–µ–ª–∞–ï': '–°–¥–µ–ª–∞–µ—Ç',
                '—Å–∫–∞–∂–µ': '—Å–∫–∞–∂–µ—Ç',
                '—Å–∫–∞–∂–ï': '–°–∫–∞–∂–µ—Ç',
                '–ø–æ–∫–∞–∂–µ': '–ø–æ–∫–∞–∂–µ—Ç',
                '–ø–æ–∫–∞–∂–ï': '–ü–æ–∫–∞–∂–µ—Ç',
                '–±—É–¥–µ': '–±—É–¥–µ—Ç',
                '–±—É–¥–ï': '–ë—É–¥–µ—Ç',
                '–º–æ–∂–µ': '–º–æ–∂–µ—Ç',
                '–º–æ–∂–ï': '–ú–æ–∂–µ—Ç',
                '—É–º–µ–µ': '—É–º–µ–µ—Ç',
                '—É–º–µ–ï': '–£–º–µ–µ—Ç',
                '–∑–Ω–∞–µ': '–∑–Ω–∞–µ—Ç',
                '–∑–Ω–∞–ï': '–ó–Ω–∞–µ—Ç',
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ScanovichAI
                '—Å–∫–∞–Ω–æ–≤–∏—á –∞–∞': 'ScanovichAI',
                '—Å–∫–∞–Ω–æ–≤–∏—á': 'ScanovichAI',
                '–°–∫–∞–Ω–æ–≤–∏—á –ê–ê': 'ScanovichAI',
                '–°–∫–∞–Ω–æ–≤–∏—á': 'ScanovichAI',
                'scanovich –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': 'ScanovichAI',
                'Scanovich –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': 'ScanovichAI',
                'scanovich ai': 'ScanovichAI',
                'Scanovich ai': 'ScanovichAI',
                'scanovichai': 'ScanovichAI',
                'Scanovichai': 'ScanovichAI',
            }

            for wrong, correct in corrections.items():
                text = text.replace(wrong, correct)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
            text = re.sub(r':\s*([–∞-—è])', lambda m: ': ' + m.group(1).upper(), text)

            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–≥–∏ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            text = re.sub(r'(^|[.!?]\s+)(–≤|–Ω–∞|—Å|–ø–æ|–∏–∑|–∫|–æ—Ç|—É)\s',
                         lambda m: m.group(1) + m.group(2).lower() + ' ', text)

            return text

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª: {e}")
            return text

    def add_custom_term(self, term: str, variations: List[str] = None, context: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω –≤ —Å–ª–æ–≤–∞—Ä—å"""
        try:
            if variations is None:
                variations = [term]

            self.custom_terms[term] = {
                "variations": variations,
                "expand": term,
                "context": context
            }

            self._save_vocabulary("custom_terms.json", self.custom_terms)
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω: {term}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞: {e}")

    def add_abbreviation(self, abbr: str, expansion: str, context: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É"""
        try:
            self.abbreviations[abbr] = {
                "expand": expansion,
                "context": context
            }

            self._save_vocabulary("abbreviations.json", self.abbreviations)
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞: {abbr} -> {expansion}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã: {e}")

    def _save_vocabulary(self, filename: str, data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª"""
        try:
            filepath = os.path.join(self.vocab_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è {filename}: {e}")

    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞—Ä—è"""
        return {
            "custom_terms": len(self.custom_terms),
            "abbreviations": len(self.abbreviations),
            "names": len(self.names) if self.names else 0,
            "enabled": self.enabled
        }
