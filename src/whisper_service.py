"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —á–µ—Ä–µ–∑ MLX Whisper
"""
# pylint: disable=line-too-long

import logging
import numpy as np
import gc
from pathlib import Path
from typing import Dict, Any
import mlx_whisper
from .memory_manager import free_memory


class WhisperService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MLX Whisper"""
    
    def __init__(self, config: Any):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Whisper
        
        Args:
            config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
        performance = config.performance
        gc_key = "force_garbage_collection"
        self.force_gc = performance.get(gc_key, True)
        cache_key = "clear_model_cache_after_use"
        self.clear_cache = performance.get(cache_key, True)
        
        self.logger.info("MLX Whisper —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        self._preferred_model_path = self._resolve_whisper_path()
    
    def transcribe(
        self, 
        audio_data: np.ndarray, 
        language: str = "ru"
    ) -> Dict[str, Any]:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ numpy array
            language: –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        """
        try:
            duration = len(audio_data) / 16000
            msg = f"–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏, –¥–ª–∏–Ω–∞: {duration:.2f}—Å"
            self.logger.info(msg)
            
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            if self.force_gc:
                gc.collect()
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            whisper_path = self._preferred_model_path

            result = mlx_whisper.transcribe(
                audio=audio_data,
                path_or_hf_repo=whisper_path,
                temperature=0.2,  # üõ† –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                compression_ratio_threshold=2.0,  # üõ† –°—Ç—Ä–æ–∂–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                logprob_threshold=-0.8,  # üõ† –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥
                no_speech_threshold=0.6,
                condition_on_previous_text=False,  # üõ† –û–¢–ö–õ–Æ–ß–ê–ï–ú –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤
                suppress_tokens=[-1],  # üõ† –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                word_timestamps=True,
                language=language
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            segments = result.get("segments", [])
            clean_text = self._remove_repetitions(result["text"].strip())
            formatted_result = {
                "text": clean_text,
                "language": result.get("language", language),
                "segments": segments,
                "words": self._extract_words(segments),
                "duration": len(audio_data) / 16000,
                "confidence": self._calculate_confidence(segments)
            }
            
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            if self.clear_cache:
                self._cleanup_memory()
                free_memory("whisper-after-transcribe")
            
            text_preview = formatted_result['text'][:100]
            final_msg = f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–∫—Å—Ç: {text_preview}..."
            self.logger.info(final_msg)
            
            return formatted_result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if self.clear_cache:
                self._cleanup_memory()
                free_memory("whisper-after-file")
            raise
    
    def transcribe_file(
        self, 
        audio_file: str, 
        language: str = "ru"
    ) -> Dict[str, Any]:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        
        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            language: –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        """
        try:
            file_path = Path(audio_file)
            if not file_path.exists():
                err_msg = f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}"
                raise FileNotFoundError(err_msg)
            
            self.logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {audio_file}")
            
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            if self.force_gc:
                gc.collect()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MLX Whisper –¥–ª—è —Ñ–∞–π–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            whisper_path = self._preferred_model_path

            result = mlx_whisper.transcribe(
                audio=str(file_path),
                path_or_hf_repo=whisper_path,
                temperature=0.2,
                compression_ratio_threshold=2.0,
                logprob_threshold=-0.8,
                no_speech_threshold=0.6,
                condition_on_previous_text=False,
                suppress_tokens=[-1],
                language=language,
                word_timestamps=True
            )
            
            segments = result.get("segments", [])
            clean_text = self._remove_repetitions(result["text"].strip())
            formatted_result = {
                "text": clean_text,
                "language": result.get("language", language),
                "segments": segments,
                "words": self._extract_words(segments),
                "confidence": self._calculate_confidence(segments)
            }
            
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            if self.clear_cache:
                self._cleanup_memory()
            
            return formatted_result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if self.clear_cache:
                self._cleanup_memory()
            raise
    
    def _cleanup_memory(self):
        """üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            if self.force_gc:
                gc.collect()
            
            self.logger.debug("–ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ Whisper –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ Whisper: {e}")

    def _resolve_whisper_path(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏. –û—à–∏–±–∫—É –±—Ä–æ—Å–∞–µ—Ç, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
        try:
            cfg = self.config.whisper.get("whisper", {})
            cfg_path = cfg.get("path")
            if cfg_path:
                p = Path(str(cfg_path))
                if p.exists():
                    return str(p)
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_local = Path("models/whisper-large-v3-mlx")
            if default_local.exists():
                return str(default_local)
            # –ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —É–∂–µ –ª–µ–∂–∞—Ç config.json/weights.npz)
            root_models = Path("models")
            if root_models.exists():
                cfg_file = root_models / "config.json"
                weights_file = root_models / "weights.npz"
                if cfg_file.exists() and weights_file.exists():
                    return str(root_models)
            # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–π –æ—à–∏–±–∫–æ–π
            raise FileNotFoundError(
                "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Whisper. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ (config.json, "
                "weights.npz) —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã `mlx-community/whisper-large-v3-mlx` –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –∏—Ö "
                "–≤ –∫–∞—Ç–∞–ª–æ–≥ ./models, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –≤ config.yaml (models.whisper.path)."
            )
        except Exception:
            raise

    def _local_model_dir(self) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        # 1) –ö–æ–Ω—Ñ–∏–≥-–∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–∞–ª–æ–≥
        try:
            cfg = self.config.whisper.get("whisper", {})
            cfg_path = cfg.get("path")
            if cfg_path and Path(str(cfg_path)).exists():
                return str(Path(str(cfg_path)))
        except Exception:
            pass
        # 2) –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
        candidate = Path("models/whisper-large-v3-mlx")
        if candidate.exists():
            return str(candidate)
        # 3) –ö–æ—Ä–µ–Ω—å models —Å —Ñ–∞–π–ª–∞–º–∏ –º–æ–¥–µ–ª–∏
        root_models = Path("models")
        cfg_file = root_models / "config.json"
        weights_file = root_models / "weights.npz"
        if root_models.exists() and cfg_file.exists() and weights_file.exists():
            return str(root_models)
        return None

    # HF‚Äë–ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
    
    def _extract_words(self, segments: list) -> list:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª–æ–≤–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        
        Args:
            segments: –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ—Ç Whisper
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        """
        words = []
        for segment in segments:
            if "words" in segment:
                for word in segment["words"]:
                    words.append({
                        "word": word.get("word", "").strip(),
                        "start": word.get("start", 0),
                        "end": word.get("end", 0),
                        "confidence": word.get("probability", 0)
                    })
        return words
    
    def _remove_repetitions(self, text: str) -> str:
        """
        –£–¥–∞–ª—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
        """
        try:
            if not text or len(text) < 50:
                return text
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = text.split('.')
            clean_sentences = []
            
            for sentence in sentences:
                sentence = sentence.strip()
                if not sentence:
                    continue
                
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –±–æ–ª–µ–µ 2 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ - —É–¥–∞–ª—è–µ–º
                if len(clean_sentences) >= 2:
                    if (
                        clean_sentences[-1].strip() == sentence
                        and clean_sentences[-2].strip() == sentence
                    ):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                        continue
                
                clean_sentences.append(sentence)
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            result = '. '.join(clean_sentences)
            if result and not result.endswith('.'):
                result += '.'
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã —Å–ª–æ–≤
            result = self._remove_word_repetitions(result)
            
            return result.strip()
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {e}")
            return text
    
    def _remove_word_repetitions(self, text: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤/—Ñ—Ä–∞–∑ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            words = text.split()
            if len(words) < 10:
                return text
            
            clean_words = []
            i = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ñ—Ä–∞–∑ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
            while i < len(words):
                found_repetition = False
                
                # –ò—â–µ–º —Ñ—Ä–∞–∑—ã –æ—Ç 5 –¥–æ 15 —Å–ª–æ–≤ (–¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Å–Ω–∞—á–∞–ª–∞)
                for phrase_len in range(15, 2, -1):
                    if i + phrase_len > len(words):
                        continue
                        
                    phrase = ' '.join(words[i:i+phrase_len])
                    
                    # –°—á–∏—Ç–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥
                    repetitions = 0
                    pos = i
                    while (pos + phrase_len <= len(words) and 
                           ' '.join(words[pos:pos+phrase_len]) == phrase):
                        repetitions += 1
                        pos += phrase_len
                    
                    # –ï—Å–ª–∏ —Ñ—Ä–∞–∑–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É
                    if repetitions > 1:
                        clean_words.extend(words[i:i+phrase_len])
                        i = pos  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                        found_repetition = True
                        msg = f"–£–¥–∞–ª–µ–Ω–æ {repetitions-1} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ñ—Ä–∞–∑—ã"
                        self.logger.info(f"{msg}: '{phrase[:50]}...'")
                        break
                
                # –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
                if not found_repetition:
                    clean_words.append(words[i])
                    i += 1
            
            return ' '.join(clean_words)
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–ª–æ–≤: {e}")
            return text

    def _calculate_confidence(self, segments: list) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        
        Args:
            segments: –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ—Ç Whisper
            
        Returns:
            –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–æ—Ç 0 –¥–æ 1)
        """
        if not segments:
            return 0.0
        
        total_confidence = 0.0
        word_count = 0
        
        for segment in segments:
            if "words" in segment:
                for word in segment["words"]:
                    total_confidence += word.get("probability", 0)
                    word_count += 1
        
        return total_confidence / word_count if word_count > 0 else 0.0 