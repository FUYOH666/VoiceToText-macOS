"""
–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏
–í–ù–ò–ú–ê–ù–ò–ï: MLX Whisper –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã!
"""

import logging
import numpy as np
import gc
from typing import Optional, Callable, Tuple, Any


class AsyncSpeechProcessor:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""

    def __init__(self, whisper_service, punctuation_service,
                 config: Any, max_workers=2):
        self.logger = logging.getLogger(__name__)
        self.whisper_service = whisper_service
        self.punctuation_service = punctuation_service
        self.config = config

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        chunk_config = config.performance.get("chunk_processing", {})
        self.chunk_enabled = chunk_config.get("enabled", True)
        self.chunk_threshold_sec = chunk_config.get("chunk_threshold_sec", 60)  # –ü–æ—Ä–æ–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤
        self.chunk_duration_sec = chunk_config.get("max_chunk_duration_sec", 30)  # –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
        self.chunk_overlap_sec = chunk_config.get("chunk_overlap_sec", 1)  # –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
        self.max_memory_mb = config.performance.get("memory_limit_mb", 1024)

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–∫–ª—é—á–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
        self.force_gc = config.performance.get("force_garbage_collection", False)
        self.clear_cache = config.performance.get("clear_model_cache_after_use", False)

        self.logger.info(f"SpeechProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)")
        self.logger.info(f"–ß–∞–Ω–∫–∏ –≤–∫–ª—é—á–∞—é—Ç—Å—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ >{self.chunk_threshold_sec}—Å–µ–∫")

    def process_audio_parallel(
        self,
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

        Args:
            audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            progress_callback: –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

        Returns:
            Tuple[—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, —Ä–µ–∑—é–º–µ_llm]
        """
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
            duration_sec = len(audio_data) / 16000
            self.logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_sec:.1f} —Å–µ–∫—É–Ω–¥")

            # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
            if not self.chunk_enabled or duration_sec <= self.chunk_threshold_sec:
                self.logger.info("‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±–µ–∑ —á–∞–Ω–∫–æ–≤)")
                return self._process_fast_audio(audio_data, progress_callback)
            else:
                self.logger.info("üéØ –î–ª–∏–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞–Ω–∫–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return self._process_long_audio(audio_data, progress_callback)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self._cleanup_memory()
            return "", None

    def _process_fast_audio(
        self,
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π (–±–µ–∑ —á–∞–Ω–∫–æ–≤ –∏ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)"""
        if progress_callback:
            progress_callback("‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

        # –≠—Ç–∞–ø 1: Whisper - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        transcribed_text = self._sync_transcribe(audio_data, quiet=True)

        if not transcribed_text.strip():
            return "", None

        # –≠—Ç–∞–ø 2: –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        punctuated_text = self._sync_punctuation(transcribed_text)

        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ —Ç—Ä–∞—Ç–∏–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
        self.logger.info("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return punctuated_text, None

    def _process_chunk_audio(
        self,
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ (—Å –ø–æ–ª–Ω–æ–π –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–æ–π)"""
        # –≠—Ç–∞–ø 1: Whisper
        transcribed_text = self._sync_transcribe(audio_data)

        if not transcribed_text.strip():
            return "", None

        # –≠—Ç–∞–ø 2: –ü–æ–ª–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∞–Ω–∫–æ–≤
        punctuated_text = self._sync_punctuation(transcribed_text)

        return punctuated_text, None

    def _process_long_audio(
        self,
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ —á–∞–Ω–∫–∞–º"""
        try:
            self.logger.info("üéØ –ù–∞—á–∏–Ω–∞–µ–º —á–∞–Ω–∫–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ")

            # –†–∞–∑–±–∏–≤–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ —á–∞–Ω–∫–∏
            chunks = self._split_audio_into_chunks(audio_data)
            self.logger.info(f"üì¶ –ê—É–¥–∏–æ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")

            combined_text = []
            total_chunks = len(chunks)

            for i, chunk in enumerate(chunks):
                if progress_callback:
                    progress_msg = f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i+1}/{total_chunks}..."
                    progress_callback(progress_msg)

                self.logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {i+1}/{total_chunks}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫
                chunk_result = self._process_chunk_audio(chunk, None)

                if chunk_result and chunk_result[0].strip():
                    combined_text.append(chunk_result[0].strip())

                # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                if self.force_gc:
                    self._cleanup_memory()

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if combined_text:
                final_text = " ".join(combined_text)

                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
                if progress_callback:
                    progress_callback("‚ö° –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞...")

                final_text = self._sync_punctuation(final_text)

                # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if self.force_gc:
                    self._cleanup_memory()

                self.logger.info(f"‚úÖ –î–ª–∏–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return final_text, None
            else:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —á–∞–Ω–∫")
                return "", None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            return "", None

    def _sync_transcribe(self, audio_data: np.ndarray, quiet: bool = False) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"""
        try:
            result = self.whisper_service.transcribe(audio_data)
            text = result.get("text", "") if isinstance(result, dict) else result

            # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if not quiet:
                preview = text[:50] if text else "–ø—É—Å—Ç–æ"
                self.logger.info(f"Whisper —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{preview}...'")

            return text
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Whisper: {e}")
            return ""

    def _sync_punctuation(self, text: str) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏"""
        try:
            return self.punctuation_service.restore_punctuation(text)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏: {e}")
            return text
    
    def _split_audio_into_chunks(self, audio_data: np.ndarray) -> list:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ –Ω–∞ —á–∞–Ω–∫–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º

        Args:
            audio_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ

        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ (—Å–ø–∏—Å–æ–∫ numpy –º–∞—Å—Å–∏–≤–æ–≤)
        """
        try:
            sample_rate = 16000
            chunk_samples = int(self.chunk_duration_sec * sample_rate)
            overlap_samples = int(self.chunk_overlap_sec * sample_rate)

            total_samples = len(audio_data)
            chunks = []

            start_sample = 0

            while start_sample < total_samples:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —á–∞–Ω–∫–∞
                end_sample = min(start_sample + chunk_samples, total_samples)

                # –í—ã—Ä–µ–∑–∞–µ–º —á–∞–Ω–∫
                chunk = audio_data[start_sample:end_sample]
                chunks.append(chunk)

                self.logger.debug(f"–ß–∞–Ω–∫ {len(chunks)}: {start_sample}-{end_sample} —Å—ç–º–ø–ª–æ–≤ "
                                f"({len(chunk)/sample_rate:.1f} —Å–µ–∫)")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞–Ω–∫—É —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                if end_sample >= total_samples:
                    break

                start_sample = end_sample - overlap_samples

                # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–º, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ –≤ —Ç–µ–∫—É—â–∏–π
                if total_samples - start_sample < chunk_samples * 0.3:
                    break

            self.logger.info(f"–ê—É–¥–∏–æ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")
            return chunks

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∞—É–¥–∏–æ –Ω–∞ —á–∞–Ω–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ –∫–∞–∫ –æ–¥–∏–Ω —á–∞–Ω–∫
            return [audio_data]

    def _cleanup_memory(self):
        """üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            gc.collect()
            self.logger.debug("–ü–∞–º—è—Ç—å AsyncProcessor –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ AsyncProcessor: {e}")
    
    def process_audio_sync(
        self,
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        # üÜï –ü—Ä—è–º–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ asyncio
        return self.process_audio_parallel(audio_data, progress_callback)