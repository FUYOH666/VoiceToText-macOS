"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏
–í–ù–ò–ú–ê–ù–ò–ï: MLX Whisper –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã!
"""

import asyncio
import logging
import numpy as np
import gc
from concurrent.futures import ThreadPoolExecutor
from typing import Optional, Callable, Tuple


class AsyncSpeechProcessor:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, whisper_service, punctuation_service, 
                 max_workers=2):
        self.logger = logging.getLogger(__name__)
        self.whisper_service = whisper_service
        self.punctuation_service = punctuation_service
        
        # üÜï –£–±–∏—Ä–∞–µ–º ThreadPoolExecutor –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ semaphore
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ asyncio
        self.logger.info("AsyncSpeechProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ ThreadPoolExecutor)")
        
    async def process_audio_parallel(
        self, 
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å async –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            progress_callback: –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            
        Returns:
            Tuple[—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, —Ä–µ–∑—é–º–µ_llm]
        """
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            if progress_callback:
                progress_callback("üéØ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
            
            # –≠—Ç–∞–ø 1: Whisper - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (MLX –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
            transcribed_text = await self._async_transcribe(audio_data)
            
            if not transcribed_text.strip():
                return "", None
            
            # –≠—Ç–∞–ø 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è)
            if progress_callback:
                progress_callback("‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
            punctuated_text = await self._async_punctuation(transcribed_text)
            
            # üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            self._cleanup_memory()
            
            self.logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return punctuated_text, None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self._cleanup_memory()
            return "", None
    
    async def _async_transcribe(self, audio_data: np.ndarray) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–æ–¥–∏–Ω –≤—ã–∑–æ–≤ Whisper)"""
        loop = asyncio.get_event_loop()
        
        def transcribe():
            try:
                result = self.whisper_service.transcribe(audio_data)
                text = result.get("text", "") if isinstance(result, dict) else result
                preview = text[:50] if text else "–ø—É—Å—Ç–æ"
                self.logger.info(f"Whisper —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{preview}...'")
                return text
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ Whisper: {e}")
                return ""
        
        return await loop.run_in_executor(None, transcribe)
    
    async def _async_punctuation(self, text: str) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏"""
        loop = asyncio.get_event_loop()
        
        def restore_punctuation():
            try:
                return self.punctuation_service.restore_punctuation(text)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏: {e}")
                return text
        
        return await loop.run_in_executor(None, restore_punctuation)
    
    def _cleanup_memory(self):
        """üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            gc.collect()
            self.logger.debug("–ü–∞–º—è—Ç—å AsyncProcessor –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ AsyncProcessor: {e}")
    
    def process_audio_sync(
        self,
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è async –æ–±—Ä–∞–±–æ—Ç–∫–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        # üÜï –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö ThreadPoolExecutor
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                return loop.run_until_complete(
                    self.process_audio_parallel(audio_data, progress_callback)
                )
            finally:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                try:
                    loop.close()
                except Exception:
                    pass
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return "", None