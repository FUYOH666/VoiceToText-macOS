"""
–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏
–í–ù–ò–ú–ê–ù–ò–ï: MLX Whisper –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã!
"""

import logging
import numpy as np
import gc
from typing import Optional, Callable, Tuple


class AsyncSpeechProcessor:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏"""
    
    def __init__(self, whisper_service, punctuation_service,
                 max_workers=2):
        self.logger = logging.getLogger(__name__)
        self.whisper_service = whisper_service
        self.punctuation_service = punctuation_service

        # üÜï –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ multiprocessing
        self.logger.info("SpeechProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")

    def process_audio_parallel(
        self,
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ

        Args:
            audio_data: –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            progress_callback: –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ

        Returns:
            Tuple[—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, —Ä–µ–∑—é–º–µ_llm]
        """
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏")

            if progress_callback:
                progress_callback("üéØ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")

            # –≠—Ç–∞–ø 1: Whisper - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            transcribed_text = self._sync_transcribe(audio_data)

            if not transcribed_text.strip():
                return "", None

            # –≠—Ç–∞–ø 2: –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            if progress_callback:
                progress_callback("‚ö° –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞...")

            # –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
            punctuated_text = self._sync_punctuation(transcribed_text)

            # üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            self._cleanup_memory()

            self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return punctuated_text, None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # üÜï –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self._cleanup_memory()
            return "", None

    def _sync_transcribe(self, audio_data: np.ndarray) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"""
        try:
            result = self.whisper_service.transcribe(audio_data)
            text = result.get("text", "") if isinstance(result, dict) else result
            preview = text[:50] if text else "–ø—É—Å—Ç–æ"
            self.logger.info(f"Whisper —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{preview}...'")
            return text
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Whisper: {e}")
            return ""

    def _sync_punctuation(self, text: str) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏"""
        try:
            return self.punctuation_service.restore_punctuation(text)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏: {e}")
            return text
    
    def _cleanup_memory(self):
        """üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            gc.collect()
            self.logger.debug("–ü–∞–º—è—Ç—å AsyncProcessor –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ AsyncProcessor: {e}")
    
    def process_audio_sync(
        self,
        audio_data: np.ndarray,
        progress_callback: Optional[Callable[[str], None]] = None
    ) -> Tuple[str, Optional[str]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        # üÜï –ü—Ä—è–º–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ asyncio
        return self.process_audio_parallel(audio_data, progress_callback)