"""
–°–µ—Ä–≤–∏—Å –Ω–∞—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è macOS
"""

import logging
import subprocess
from typing import Optional


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π macOS"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.app_name = "SuperWhisper"
    
    def send_notification(
        self, 
        title: str, 
        message: str, 
        subtitle: Optional[str] = None,
        sound: bool = False
    ):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ macOS
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            subtitle: –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            sound: –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫
        """
        try:
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è osascript (AppleScript)
            script_parts = [
                'osascript',
                '-e',
                f'display notification "{message}"'
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            script_parts[2] += f' with title "{title}"'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if subtitle:
                script_parts[2] += f' subtitle "{subtitle}"'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫
            if sound:
                script_parts[2] += ' sound name "Glass"'
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            subprocess.run(script_parts, check=True, capture_output=True)
            self.logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title} - {message}")
            
        except subprocess.CalledProcessError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def notify_recording_started(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏"""
        self.send_notification(
            title="üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞",
            message="–ì–æ–≤–æ—Ä–∏—Ç–µ, SuperWhisper —Å–ª—É—à–∞–µ—Ç...",
            sound=True
        )
    
    def notify_recording_stopped(self, duration: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏"""
        self.send_notification(
            title="‚èπ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            message=f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...",
            sound=False
        )
    
    def notify_processing_stage(self, stage: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞–¥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.send_notification(
            title="‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞",
            message=stage,
            sound=False
        )
    
    def notify_text_ready(self, text_length: int, pasted: bool = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        if pasted is True:
            message = (f"–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ({text_length} —Å–∏–º–≤–æ–ª–æ–≤) "
                       "–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω")
            title = "‚úÖ –ì–æ—Ç–æ–≤–æ –∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ"
        elif pasted is False:
            message = (f"–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ({text_length} —Å–∏–º–≤–æ–ª–æ–≤) "
                       "–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä")
            title = "‚úÖ –ì–æ—Ç–æ–≤–æ"
        else:
            message = f"–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ({text_length} —Å–∏–º–≤–æ–ª–æ–≤) –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
            title = "‚úÖ –ì–æ—Ç–æ–≤–æ"
            
        self.send_notification(
            title=title,
            message=message,
            sound=True
        )
    
    def notify_no_speech(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ—á–∏"""
        self.send_notification(
            title="ü§´ –¢–∏—à–∏–Ω–∞",
            message="–†–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞",
            sound=False
        )
    
    def notify_transcription_complete(self, text: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        preview = text[:50] + "..." if len(text) > 50 else text
        self.send_notification(
            title="‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞",
            message=f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {preview}",
            sound=True
        )
    

    
    def notify_error(self, error_message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.send_notification(
            title="‚ùå –û—à–∏–±–∫–∞",
            message=error_message,
            sound=True
        ) 