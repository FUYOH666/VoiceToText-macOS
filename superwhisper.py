"""
VTT (VoiceToText) Local - –ø—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
"""

import os
import sys
import logging
import threading
import time
import rumps
import pyperclip
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ PATH (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –º–æ–¥—É–ª—è)
src_path = os.path.join(os.path.dirname(__file__), 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

from src.config import Config  # noqa: E402
from src.audio_recorder import AudioRecorder  # noqa: E402
from src.whisper_service import WhisperService  # noqa: E402
from src.punctuation_service import PunctuationService  # noqa: E402
from src.notification_service import NotificationService  # noqa: E402
from src.hotkey_manager import HotkeyManager  # noqa: E402
from src.auto_paste import AutoPasteService  # noqa: E402
from src.memory_manager import free_memory, log_process_memory  # noqa: E402
from src.async_processor import AsyncSpeechProcessor  # noqa: E402
from src.vocabulary_service import VocabularyService  # noqa: E402 - –ù–û–í–´–ô –°–ï–†–í–ò–°
from src.debloat_service import DebloatService  # noqa: E402 - –°–ï–†–í–ò–° –î–ï-–ë–û–õ–¢–û–í–ù–ò
from src.number_service import NumberService  # noqa: E402 - –°–ï–†–í–ò–° –ß–ò–°–ï–õ


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler()
        ]
    )


class ProgressStates:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    IDLE = ("üé§", "VTT –≥–æ—Ç–æ–≤ | Option+Space –¥–ª—è –∑–∞–ø–∏—Å–∏")
    RECORDING = ("üî¥", "–ó–ê–ü–ò–°–¨ | {time} | –ù–∞–∂–º–∏—Ç–µ Option+Space –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    PROCESSING = ("‚è≥", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ... | –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    TRANSCRIBING = ("üß†", "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏... | –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ")
    PUNCTUATING = ("‚úèÔ∏è", "–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞... | –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    FINALIZING = ("‚úÖ", "–ì–æ—Ç–æ–≤–æ! | –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
    ERROR = ("‚ùå", "–û—à–∏–±–∫–∞ | –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


class VTTApp(rumps.App):
    """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ VTT (VoiceToText) —Å –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–æ–π"""
    
    def __init__(self, config: Config):
        super().__init__("VTT (VoiceToText)", title="üé§")
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_recording = False
        self.is_processing = False
        self.last_text = ""
        self.recording_start_time = None
        self.recording_timer = None

        # –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        self.use_clipboard_paste = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_services()
        self._create_menu()
        self._start_hotkeys()
        
        self.logger.info("VTT (VoiceToText) –∑–∞–ø—É—â–µ–Ω")
    
    def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            self.whisper_service = WhisperService(self.config)
            self.punctuation_service = PunctuationService(self.config)
            self.notification_service = NotificationService()
            self.audio_recorder = AudioRecorder(self.config)
            
            # üîë –ì–õ–ê–í–ù–´–ô –°–ï–†–í–ò–° - –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞
            self.auto_paste_service = AutoPasteService(self.config)

            # üìö –ù–û–í–´–ô –°–ï–†–í–ò–° - –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            self.vocabulary_service = VocabularyService(self.config)

            # üßπ –ù–û–í–´–ô –°–ï–†–í–ò–° - –¥–µ-–±–æ–ª—Ç–æ–≤–Ω—è
            self.debloat_service = DebloatService(self.config)

            # üî¢ –ù–û–í–´–ô –°–ï–†–í–ò–° - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
            self.number_service = NumberService(self.config)

            # Async –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            self.async_processor = AsyncSpeechProcessor(
                self.whisper_service,
                self.punctuation_service
            )
            
            self.logger.info("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            raise
    
    def _create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        self.record_menu_item = rumps.MenuItem(
            "üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
            callback=self.toggle_recording
        )

        self.menu = [
            rumps.MenuItem("üìç –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤", callback=None),
            rumps.separator,
            self.record_menu_item,
            rumps.separator,
            rumps.MenuItem("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback=self.copy_text),
            rumps.MenuItem("üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç", callback=self.show_text),
            rumps.separator,
            rumps.MenuItem("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback=self.show_about),
        ]
    
    def _start_hotkeys(self):
        """–ó–∞–ø—É—Å–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        try:
            # –ü–µ—Ä–µ–¥–∞—ë–º self (rumps.App), —á—Ç–æ–±—ã –∫–æ–ª–±—ç–∫ —à—ë–ª –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
            self.hotkey_manager = HotkeyManager(rumps_app_instance=self)
            self.hotkey_manager.set_callback(self._on_hotkey_pressed)
            self.hotkey_manager.start()
            self.logger.info("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à: {e}")
    
    def _on_hotkey_pressed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Option+Space"""
        if self.is_processing:
            return

        if self.is_recording:
            self.stop_recording()
        else:
            self.start_recording()

    
    def _update_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ–Ω—é"""
        if hasattr(self, 'menu') and self.menu:
            self.menu["üìç –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤"].title = f"üìç –°—Ç–∞—Ç—É—Å: {status}"
    
    def _update_icon(self, recording: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏"""
        if recording:
            self.title = "üî¥"
        else:
            self.title = "üé§"
    
    @rumps.clicked("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
    def toggle_recording(self, _):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        if self.is_recording:
            self.stop_recording()
        else:
            self.start_recording()
    
    def start_recording(self):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        if self.is_recording or self.is_processing:
            return
            
        try:
            self.is_recording = True
            self.recording_start_time = time.time()
            self._update_progress("RECORDING")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            self.record_menu_item.title = "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏
            self.notification_service.notify_recording_started()
            
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å
            self.audio_recorder.start_recording()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
            self._start_recording_timer()
            
            self.logger.info("–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
            self.is_recording = False
            self._update_progress("IDLE")
            self.notification_service.notify_error(str(e))
    
    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        if not self.is_recording:
            return
            
        try:
            self.is_recording = False
            self._stop_recording_timer()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self._update_progress("PROCESSING")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
            audio_data = self.audio_recorder.stop_recording()
            duration = len(audio_data) / 16000 if audio_data is not None else 0
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            self.notification_service.notify_recording_stopped(duration)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            self.record_menu_item.title = "üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"
            
            if audio_data is not None and len(audio_data) > 0:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threading.Thread(
                    target=self._process_audio,
                    args=(audio_data,),
                    daemon=True
                ).start()
            else:
                self.logger.warning("–ù–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                self._update_progress("IDLE")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            self._update_progress("IDLE")
            self.notification_service.notify_error(str(e))
    
    def _process_audio(self, audio_data):
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–æ–π"""
        try:
            self.is_processing = True
            
            # üÜï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if self.config.performance.get("log_memory_usage", False):
                log_process_memory("–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def progress_callback(stage):
                """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
                stage_map = {
                    "vad": "PROCESSING",
                    "transcription": "TRANSCRIBING", 
                    "punctuation": "PUNCTUATING",
                    "llm": "FINALIZING"
                }
                if stage in stage_map:
                    self._update_progress(stage_map[stage])
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ async –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            result = self.async_processor.process_audio_sync(
                audio_data,
                progress_callback=progress_callback,
            )
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: result —ç—Ç–æ tuple (text, llm_summary)
            if result and isinstance(result, tuple) and len(result) >= 2:
                final_text, llm_summary = result
                if final_text and final_text.strip():
                    self._finalize_processing(final_text)
                else:
                    self.logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                    self._update_progress("IDLE")
            else:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                self._update_progress("IDLE")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            self.notification_service.notify_error(str(e))
            self._update_progress("IDLE")
        finally:
            self.is_processing = False
    
    def _finalize_processing(self, text):
        """–ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–æ–π"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            self._update_progress("FINALIZING")
            
            self.is_processing = False
            
            if not text or not text.strip():
                self.notification_service.notify_no_speech()
                self._update_progress("IDLE")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            final_text = text.strip()

            # üßπ –î–ï-–ë–û–õ–¢–û–í–ù–Ø (–æ—á–∏—Å—Ç–∫–∞ –æ—Ç –º–µ–∂–¥–æ–º–µ—Ç–∏–π)
            final_text = self.debloat_service.process_text(final_text)

            # üìö –ü–†–ò–ú–ï–ù–Ø–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô –°–õ–û–í–ê–†–¨
            final_text = self.vocabulary_service.process_text(final_text)

            # üî¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ß–ò–°–ï–õ
            final_text = self.number_service.process_text(final_text)

            self.last_text = final_text
            
            # üéØ –ü–†–û–°–¢–ê–Ø –ê–í–¢–û–í–°–¢–ê–í–ö–ê
            try:
                auto_paste_enabled = self.config.ui.get("auto_paste_enabled", True)
                
                if auto_paste_enabled:
                    self.logger.info(f"üìù –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
                    success = self.auto_paste_service.paste_text(
                        final_text,
                        use_clipboard=self.use_clipboard_paste
                    )
                    if success:
                        self.logger.info("‚úÖ –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        self.logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                else:
                    self.logger.info("–ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.notification_service.notify_transcription_complete(
                text=self.last_text
            )
                
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            try:
                pyperclip.copy(self.last_text)
                self.logger.info("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._cleanup_after_processing()

            # üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self._cleanup_temp_files()

            # üÜï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            if self.config.performance.get("log_memory_usage", False):
                log_process_memory("–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–æ—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._update_progress("IDLE")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.notification_service.notify_error(str(e))
            self._update_progress("IDLE")
    
    def _cleanup_after_processing(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
            if hasattr(self, 'audio_recorder'):
                self.audio_recorder.cleanup()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            performance = self.config.performance
            if performance.get("force_garbage_collection", True):
                free_memory("post-processing")
                self.logger.debug("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            # –û—á–∏—â–∞–µ–º async –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            if hasattr(self, 'async_processor'):
                self.async_processor._cleanup_memory()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def _cleanup_temp_files(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ WAV/MP3 —Ñ–∞–π–ª—ã –∏–∑ cache
            cache_dir = Path("cache")
            if cache_dir.exists():
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ)
                import time
                current_time = time.time()
                max_age = 60  # 1 –º–∏–Ω—É—Ç–∞

                for audio_file in cache_dir.glob("*.wav"):
                    if current_time - audio_file.stat().st_mtime > max_age:
                        audio_file.unlink()
                        self.logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {audio_file}")

                for audio_file in cache_dir.glob("*.mp3"):
                    if current_time - audio_file.stat().st_mtime > max_age:
                        audio_file.unlink()
                        self.logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {audio_file}")

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ
            import tempfile
            temp_dir = Path(tempfile.gettempdir())
            for temp_file in temp_dir.glob("vtt_*.wav"):
                if current_time - temp_file.stat().st_mtime > max_age:
                    temp_file.unlink()
                    self.logger.debug(f"–£–¥–∞–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")

            self.logger.debug("üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    @rumps.clicked("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
    def copy_text(self, _):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not self.last_text:
            rumps.alert("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        pyperclip.copy(self.last_text)
        self.notification_service.send_notification(
            title="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
            message="–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
        )
    
    @rumps.clicked("üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç")
    def show_text(self, _):
        """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not self.last_text:
            rumps.alert("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        display_text = self.last_text
        if len(display_text) > 500:
            display_text = display_text[:500] + "..."
            
        rumps.alert(
            title="–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç",
            message=display_text,
            ok="OK"
        )
    
    @rumps.clicked("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
    def show_about(self, _):
        """–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        rumps.alert(
            title="VTT (VoiceToText)",
            message="–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏–∫—Ç–æ–≤–∫–∞ –¥–ª—è macOS\n\n"
                   "üöÄ –§—É–Ω–∫—Ü–∏–∏:\n"
                   "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Whisper\n"
                   "‚Ä¢ –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞\n"
                   "‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n\n"
                   "‚å®Ô∏è Option+Space - –∑–∞–ø–∏—Å—å/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
            ok="OK"
        )

    def _start_recording_timer(self):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–ø–∏—Å–∏"""
        def update_timer():
            while self.is_recording:
                self._update_progress("RECORDING")
                time.sleep(1)
        
        self.recording_timer = threading.Thread(target=update_timer, daemon=True)
        self.recording_timer.start()
    
    def _stop_recording_timer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–ø–∏—Å–∏"""
        if self.recording_timer and self.recording_timer.is_alive():
            # –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∞–º –∫–æ–≥–¥–∞ is_recording —Å—Ç–∞–Ω–µ—Ç False
            pass

    def _update_progress(self, state_key: str, extra_info: str = ""):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π"""
        try:
            icon, description = getattr(ProgressStates, state_key)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if "{time}" in description and self.recording_start_time:
                elapsed = time.time() - self.recording_start_time
                time_str = f"{int(elapsed//60):02d}:{int(elapsed%60):02d}"
                description = description.format(time=time_str)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Å—Ç–∞—Ç—É—Å
            self.title = icon
            self._update_status(description + extra_info)
            
            self.logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {description}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞
        import subprocess
        result = subprocess.run(
            ["pgrep", "-f", "superwhisper.py"], 
            capture_output=True, 
            text=True
        )
        if result.stdout.strip():
            pids = result.stdout.strip().split('\n')
            if len(pids) > 1:  # –ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                return
        
        config = Config("config.yaml")
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ VTT (VoiceToText)")
        
        app = VTTApp(config)
        app.run()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main() 