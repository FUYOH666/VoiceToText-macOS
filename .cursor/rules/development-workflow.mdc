---
alwaysApply: false
description: Development workflow and testing guidelines for SuperWhisper
---

# Development Workflow –¥–ª—è SuperWhisper

## üéØ –§–∏–ª–æ—Å–æ—Ñ–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### –ú–∏–Ω–∏–º–∞–ª–∏–∑–º
- –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- –ß–∏—Å—Ç—ã–π –∫–æ–¥ –±–µ–∑ –∏–∑–ª–∏—à–µ—Å—Ç–≤
- –§–æ–∫—É—Å –Ω–∞ core functionality

### –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
- Graceful error handling
- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Apple Silicon
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
- –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫

## üöÄ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

### 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
```bash
# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
git clone https://github.com/FUYOH666/VoiceToText-macOS.git
cd VoiceToText-macOS

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞
./install_and_run.sh
```

### 2. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
```bash
# –° –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
./venv/bin/python superwhisper.py

# –° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ª–æ–≥–æ–≤
./venv/bin/python superwhisper.py > debug.log 2>&1
```

### 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
```bash
# –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
./venv/bin/python test_basic.py

# –¢–µ—Å—Ç –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏
./venv/bin/python test_auto_paste_debug.py
```

## üîß –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
```
SuperWhisper/
‚îú‚îÄ‚îÄ superwhisper.py          # üéØ –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
‚îú‚îÄ‚îÄ src/                     # üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
‚îÇ   ‚îú‚îÄ‚îÄ whisper_service.py   # üß† –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
‚îÇ   ‚îú‚îÄ‚îÄ auto_paste.py        # üìã –ê–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ punctuation_service.py # ‚úèÔ∏è –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ ...                  # –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
‚îú‚îÄ‚îÄ config.yaml             # ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îî‚îÄ‚îÄ README.md               # üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

1. **–°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å –≤ `src/`**
   ```python
   # src/my_service.py
   import logging

   class MyService:
       def __init__(self, config):
           self.config = config
           self.logger = logging.getLogger(__name__)
   ```

2. **–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª**
   ```python
   # superwhisper.py
   from src.my_service import MyService

   def _init_services(self):
       self.my_service = MyService(self.config)
   ```

3. **–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ**
   ```python
   self.logger.info("–ú–æ–π —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
   self.logger.debug(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {self.config}")
   ```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### –£—Ä–æ–≤–Ω–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

#### 1. –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
```python
# test_my_service.py
from src.my_service import MyService

def test_my_service():
    config = {"setting": "value"}
    service = MyService(config)
    assert service.config == config
```

#### 2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
```python
# –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
def test_services_integration():
    config = Config("config.yaml")
    whisper = WhisperService(config)
    punctuation = PunctuationService(config)

    # –¢–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞
    audio = load_test_audio()
    text = whisper.transcribe(audio)
    result = punctuation.restore_punctuation(text)
    assert len(result) > 0
```

#### 3. –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
```bash
# –¢–µ—Å—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
./venv/bin/python superwhisper.py

# –¢–µ—Å—Ç —Å –æ—Ç–ª–∞–¥–∫–æ–π
./venv/bin/python test_auto_paste_debug.py
```

### –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å edge cases (–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ª–∞–¥–∫–∞

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```python
# –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
self.logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞")
self.logger.debug(f"–î–µ—Ç–∞–ª–∏: {details}")
self.logger.error(f"–û—à–∏–±–∫–∞: {e}")
```

### –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
```python
import time

start_time = time.time()
result = expensive_operation()
duration = time.time() - start_time
self.logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞: {duration:.2f} —Å–µ–∫")
```

### Memory monitoring
```python
import psutil

def log_memory_usage():
    process = psutil.Process()
    memory_mb = process.memory_info().rss / 1024 / 1024
    self.logger.debug(f"–ü–∞–º—è—Ç—å: {memory_mb:.1f} MB")
```

## üîÑ –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å Git

### Feature development
```bash
# –°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É
git checkout -b feature/my-feature

# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
# ... –∫–æ–¥–∏–º ...

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
./venv/bin/python test_basic.py

# –ö–æ–º–º–∏—Ç
git add .
git commit -m "feat: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

- –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
- –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã"

# Push
git push origin feature/my-feature
```

### Code review
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É
- –£–±–µ–¥–∏—Ç—å—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ—Å—Ç–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

## üöÄ –†–µ–ª–∏–∑

### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞
```bash
# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
./install_and_run.sh
./venv/bin/python test_auto_paste_debug.py

# –û—á–∏—Å—Ç–∫–∞
rm -rf cache/ __pycache__/

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
git tag -a v1.1.0 -m "Release v1.1.0"
git push origin v1.1.0
```

### Post-release
- –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å issues

## üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

### –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–≤—Å—Ç–∞–≤–∫–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MLX –≤–º–µ—Å—Ç–æ PyTorch –¥–ª—è Apple Silicon
- –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

## üêõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

### Graceful degradation
```python
try:
    result = risky_operation()
except Exception as e:
    self.logger.error(f"–û—à–∏–±–∫–∞: {e}")
    result = fallback_operation()
```

### User-friendly messages
```python
# –í–º–µ—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
# "ImportError: No module named 'mlx_whisper'"
# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å:
# "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./install_and_run.sh"
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

### README.md
- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ
- –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

### Inline –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```python
def complex_function(self, param1: str, param2: int) -> dict:
    """
    –û–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è.

    Args:
        param1: –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        param2: –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

    Returns:
        –û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

    Raises:
        SpecificException: –ö–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞
    """
```

## üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

### Code quality
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å type hints
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –°–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID

### Git hygiene
- –ú–∞–ª–µ–Ω—å–∫–∏–µ, focused –∫–æ–º–º–∏—Ç—ã
- –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—É—à—ã

### Testing
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å edge cases
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å error conditions
- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å performance regression