---
globs: *.py
---

# Python Coding Standards для SuperWhisper

## Общие принципы

- Используйте Python 3.11+
- Русские комментарии и docstrings приветствуются
- Логирование через `logging.getLogger(__name__)`
- Обработка исключений с подробными сообщениями

## Стиль импортов

```python
# Стандартные библиотеки
import logging
import sys
from pathlib import Path

# Сторонние библиотеки
import torch
import numpy as np

# Локальные импорты
from src.config import Config
```

## Обработка ошибок

Всегда используйте try-except с логированием:

```python
try:
    # операция
    pass
except Exception as e:
    self.logger.error(f"Описание ошибки: {e}")
    # дополнительная обработка или raise
```

## Управление памятью

В сервисах обязательно добавляйте методы очистки:

```python
def _cleanup_memory(self):
    """Очистка памяти после использования"""
    try:
        gc.collect()
        self.logger.debug("Память очищена")
    except Exception as e:
        self.logger.error(f"Ошибка очистки памяти: {e}")
```

## Ленивая загрузка

Для больших моделей используйте ленивую инициализацию:

```python
def __init__(self, config):
    self.model = None  # Не загружаем сразу
    
def _load_model(self):
    """Загружает модель при первом использовании"""
    if self.model is None:
        # загрузка модели
```

## Потокобезопасность

UI операции только в главном потоке:

```python
# В фоновом потоке
def background_task(self):
    result = heavy_computation()
    # Передаём результат в главный поток
    rumps.notification(title="Готово", message=result)
```